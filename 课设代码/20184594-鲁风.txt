//语法分析需提前声明部分
void SEARCH1(string a);
void SEARCH2(string a);
void QUATFIRST();
void QUATJIA();
void QUATJIAN();
void QUATCHENGE();
void QUATCHU();
void QUATFUZHI(string len,int type);
void QUATLAST();
void QUATBEGIN();
void QUATBOOL();
void QUATTHEN();
void QUATELSE();
void QUATIFEND();
void QUATWHILE();
void QUATDO();
void QUATWHILEEND();
void QUATHANSHUSHENGMING(string str1,string str2);
void QUATDIAOYONG(string str);
void QUATRETURN();
string tp;//执行赋值语句时作为中间桥梁
int xuhao=0;//用以记录生成第几个四元式
int jilu=0;//用以记录第几个中间变量的生成
string siyuanshi[100];//存取四元式字符串数组
string temp1;
string temp2;
string bo;//存取bool的比较符，要插动作





//语法分析开始
int PROGRAM();
int SUB_PROGRAM();
int VARIABLE();
int ID_SEQUENCE();
int ARRAY();
int TYPE();
int COM_SENTENCE();
int SEN_SEQUENCE();
int EVA_SENTENCE();
int EXPRESSION();
int TERM();
int FACTOR();
int CONDITION();
int BOOL();
int CIRCLE();

int ANOUNCE_FUNCTION();
int FUN_SENTENCE();
int RETURN();
int FUNCTION();
//声明语句、赋值语句和算术表达式语法分析的开始
int PROGRAM()
{
	int back=0;
	if(!((token[ip].content[0]=='k')&&(token[ip].code==0)))/*不是program*/
	{
		back++;
		return 0;
	}
	else/*是program*/
	{
		QUATFIRST();//生成第一个四元式
		ip++;//program正确，移向下一个
	}//识别program关键字

	if(!(token[ip].content[0]=='i'))/*不是标识符*/
	{
		back++;
		return 0;
	}
	else/*是标识符*/
	{
		func0();
		ip++;//标示符正确，移向下一个
	}//识别标示符

	if((SUB_PROGRAM())==0)
	{
		back++;
		return 0;
	}//识别SUB_PROGRAM是否正确

	if((token[ip].content[0]=='p')&&(token[ip].code==9))//p9为点
	{
		QUATLAST();//生成最后一个四元式
	}
	else
	{
		back++;
		return 0;
	}

	if(back>0)
	{
		return 0;
	}
	else
	{
		return 1;
	}

}
int SUB_PROGRAM()
{

	 int back=0;
	 if(!(VARIABLE()))/*不正确*/
	 {
		 back++;
		 return 0;
	 }//识别VARIABLE是否正确

	while(((token[ip].content[0]=='k')&&(token[ip].code==1)))//如果当前单词是var
	{

		if(!(ANOUNCE_FUNCTION()))//识别函数定义不正确
		{
		    cout<<"函数识别错误"<<endl;
		    back++;
		    return 0;
		}else {
		//正确
		if(((token[ip].content[0]=='p')&&(token[ip].code==3)))//p3是分号
        ip++;
        else
        {
		 back++;
		 return 0;
         }
		}
	}

	 if(!COM_SENTENCE())/*不正确*/
	 {
		 back++;
		 return 0;
	 }

	 if(back>0)//如果能到达这个区，那么应该返回的就是1
	 {
		 return 0;
	 }
	 else
	 {
	 return 1;
	 }
}

int VARIABLE()
{
	int back=0;
	if(!(token[ip].content[0]=='k')&&(token[ip].code==1))/*不是var*/
	{
		back++;
		return 0;
	}
	else/*是var*/
	{
		func1();
		ip++;//没有缺var关键字
	}//是否写了var

	if((ID_SEQUENCE())==0)
	{
		back++;
		return 0;
	}

	if(!(token[ip].content[0]=='p')&&(token[ip].code==2))/*不是：*/
	{
		back++;
		return 0;
	}
	else/*是：*/
	{
		func7();
		ip++;//没有缺省:号
	}

	if(TYPE()==0)/*不是type*/
	{
		back++;
		return 0;
	}
	else/*是type*/
	{
		func6();
	}

	if((token[ip].content[0]=='p')&&(token[ip].code==3))/*是;*/
	{
		ip++;
	}//看缺不缺分号
	else/*不是;*/
	{
		back++;
		return 0;
	}

	while(!(((token[ip].content[0]=='k')&&(token[ip].code==5))||((token[ip].content[0]=='k')&&(token[ip].code==1))))//k5是begin,k1是var
	{
		if(!(ID_SEQUENCE()))
		{
			back++;
			return 0;
		}

		if((token[ip].content[0]=='p')&&(token[ip].code==2))//p2是冒号
		{
			func7();
			ip++;
		}
		else
		{
			back++;
			ip++;
			return 0;
		}

		if(!(TYPE()))
		{
			back++;
			return 0;
		}
		else
		{
			func6();
		}

		if((token[ip].content[0]=='p')&&(token[ip].code==3))//p3是分号
		{
			ip++;
		}
		else
		{
			back++;
			return 0;
		}
	}

	if(back>0)
	{
	return 0;
	}
	else
	{
	return 1;
	}
}

int ID_SEQUENCE()//在没有关键字的时候这个函数会出现错误
{
	int back=0;
	if(token[ip].content[0]=='i')
		{
			SEARCH1(biaoshifubiao[token[ip].code]);
			func2();
			ip++;//正确识别第一个标示符
		}
    else
	{
		back++;
		return 0;
	}
	int returnNum=ARRAY();
	if(returnNum==0)
	   {
	      back++;
		   return 0;
	   }
    if(returnNum==2){
        //TODO

        func8(biaoshifubiao[token[ip-4].code],str2int(changshubiao[token[ip-2].code]));

    }

	while(((token[ip].content[0]=='p')&&(token[ip].code==1)))//p1是逗号
	{
		ip++;
		if(token[ip].content[0]=='i')
		{
			SEARCH1(biaoshifubiao[token[ip].code]);
			func2();
			ip++;
		}
		returnNum=ARRAY();
	   if(returnNum==0)
	   {
	      back++;
		   return 0;
	   }
    if(returnNum==2){
        //TODO
        func8(biaoshifubiao[token[ip-4].code],str2int(changshubiao[token[ip-2].code]));
    }
	}

	if(back>0)
	{
		return 0;
	}
	else
	{
		return 1;
	}
}

int ARRAY()
{
    int back=0;
    if((token[ip].content[0]=='p')&&(token[ip].code==15))
    {
        ip++;
    }
    else
    {
        return 1;
    }
    if((token[ip].content[0]=='c'))
    {
        ip++;
    }
    else
    {
        back++;
        return 0;
    }
    if((token[ip].content[0]=='p')&&(token[ip].code==16))
    {
        ip++;
    }
    else
    {
        back++;
        return 0;
    }

    if(back>0)
	{
		return 0;
	}
	else
	{
		return 2;
	}
}

int TYPE()
{
	if((token[ip].content[0]=='k')&&((token[ip].code==2)||(token[ip].code==3)||(token[ip].code==4)))
	{
		if(token[ip].code==2)//k2为integer
		{
			func3();
			ip++;
		   return 1;
		}
		if(token[ip].code==3)//k3为real
		{
		    func4();
		    ip++;
            return 2;

		}
		if(token[ip].code==4)//k4为char
		{
		    func5();
		    ip++;
		    return 3;
		}

	}
	else
	{
		return 0;
	}
}


//从这里开始加入前端和后端的衔接
int xuhao1=0;
string siyuanshi1[100];

//语法制导生成四元式
void QUATFIRST()//生成第一个四元式
{
    string temp="";
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:(program,"+"I0"+","+"_"+","+"_"+")";
	siyuanshi1[xuhao1]=temp+"(program,"+"I0"+","+"_"+","+"_"+")";
	xuhao1++;
	xuhao++;
}
void QUATJIA()//加号生成四元式
{
	temp1=s.Pop();
	temp2=s.Pop();
	string* p=new string;
	*p="t"+int2str(jilu);
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:(+,"+temp2+","+temp1+","+*p+")";
	siyuanshi1[xuhao1]="(+,"+temp2+","+temp1+","+*p+")";
	s3.Push(*p);
	s.Push(*p);
	xuhao1++;
	xuhao++;

}
void QUATJIAN()//加号生成四元式
{
	temp1=s.Pop();
	temp2=s.Pop();
	string* p=new string;
	*p="t"+int2str(jilu);
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:(-,"+temp2+","+temp1+","+*p+")";
	siyuanshi1[xuhao1]="(-,"+temp2+","+temp1+","+*p+")";
	s3.Push(*p);
	s.Push(*p);
	xuhao1++;
	xuhao++;
}
void QUATCHENGE()//乘号生成四元式
{
	temp1=s.Pop();
	temp2=s.Pop();
	string* p=new string;
	*p="t"+int2str(jilu);
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:(*,"+temp2+","+temp1+","+*p+")";
	siyuanshi1[xuhao1]="(*,"+temp2+","+temp1+","+*p+")";
	s3.Push(*p);
	s.Push(*p);
	xuhao1++;
	xuhao++;
}

//赋值语句生成四元式所需函数
void QUATCHU()
{
	temp1=s.Pop();
	temp2=s.Pop();
	string* p=new string;
	*p="t"+int2str(jilu);
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:(/,"+temp2+","+temp1+","+*p+")";
	siyuanshi1[xuhao1]="(/,"+temp2+","+temp1+","+*p+")";
	s3.Push(*p);
	s.Push(*p);
	xuhao1++;
	xuhao++;
}
void QUATFUZHI(string len,int type)
{
    temp1=s.Pop();
    if(type){
        siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:(=,"+temp1+","+"_"+","+tp+"["+len+"]"+")";
        siyuanshi1[xuhao1]="(=,"+temp1+","+"_"+","+tp+"["+len+"]"+")";

    }else
	{
	    siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:(=,"+temp1+","+"_"+","+tp+")";
	    siyuanshi1[xuhao1]="(=,"+temp1+","+"_"+","+tp+")";
	}
	xuhao1++;
	xuhao++;
}

void QUATLAST()//生成最后一个四元式
{
    string temp="";
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:(end,"+"I0"+","+"_"+","+"_"+")";
	siyuanshi1[xuhao1]=temp+"(end,"+"I0"+","+"_"+","+"_"+")";
	xuhao1++;
	xuhao++;
}
void QUATBEGIN()//生成最后一个四元式
{
    string temp="";
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:(begin,"+"I0"+","+"_"+","+"_"+")";
	siyuanshi1[xuhao1]=temp+"(begin,"+"I0"+","+"_"+","+"_"+")";
	xuhao++;
	xuhao1++;
}
void outputsiyuanshi()//输出所有四元式函数
{
	cout<<"四元式序列为："<<endl;
	int i=0;
	while(siyuanshi[i]!="")
	{
		cout<<siyuanshi[i]<<endl;
		i++;
	}
	cout<<endl;
}

void outputsiyuanshi1()//输出所有四元式函数
{
	cout<<"四元式一序列为："<<endl;
	int i=0;
	while(siyuanshi1[i]!="")
	{
		cout<<siyuanshi1[i]<<endl;
		i++;
	}
	cout<<endl;
}


//以下为条件语句和循环语句生成四元式部分所需函数
void QUATBOOL()
{
	temp1=s.Pop();
	temp2=s.Pop();
	string* p=new string;
	*p="t"+int2str(jilu);
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:("+bo+","+temp2+","+temp1+","+*p+")";
	siyuanshi1[xuhao1]="("+bo+","+temp2+","+temp1+","+*p+")";
	xuhao++;
	xuhao1++;
	s.Push(*p);//将bool表达式的结果存入栈中
}
void QUATTHEN()
{
    temp1=s.Pop();
    string temp="";
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:("+"then"+","+temp1+","+"_"+",";//此时s.pop就是bool表达式的结果
	siyuanshi1[xuhao1]=temp+"("+"then"+","+temp1+","+"_"+",";
	if1=xuhao;
	if2=xuhao1;
	xuhao++;
	xuhao1++;
}
void QUATELSE()
{
    string temp="";
	int i=xuhao+1;
	int j=xuhao1+1;
	siyuanshi[if1]+=int2str(i)+")";
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:("+"else"+","+"_"+","+"_"+",";
	siyuanshi1[if2]+=int2str(j)+")";
	siyuanshi1[xuhao1]=temp+"("+"else"+","+"_"+","+"_"+",";
	if1=xuhao;
	if2=xuhao1;
	xuhao++;
	xuhao1++;
}
void QUATIFEND()
{
    string temp="";
	siyuanshi[if1]+=int2str(xuhao)+")";
	siyuanshi1[if2]+=int2str(xuhao1)+")";
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:("+"ifend"+","+"_"+","+"_"+","+"_"+")";
	siyuanshi1[xuhao1]=temp+"("+"ifend"+","+"_"+","+"_"+","+"_"+")";
	xuhao1++;
	xuhao++;
}
void QUATWHILE()
{
    string temp="";
	while1=xuhao;
	while3=xuhao1;
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:("+"while"+","+"_"+","+"_"+","+"_"+")";
	siyuanshi1[xuhao1]=temp+"("+"while"+","+"_"+","+"_"+","+"_"+")";
	xuhao1++;
	xuhao++;
}
void QUATDO()
{
	while2=xuhao;
	while4=xuhao1;
    string temp="";
	temp1=s.Pop();
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:("+"do"+","+temp1+","+"_"+",";//bool那个区已经将bool表达式的结果存进去了，即s.pop
	siyuanshi1[xuhao1]=temp+"("+"do"+","+temp1+","+"_"+",";
	xuhao1++;
	xuhao++;
}
void QUATWHILEEND()
{
    string temp="";
	int i=xuhao+1;
	int j=while1+1;
	int k=xuhao1+1;
	int m=while3+1;
	siyuanshi[while2]+=int2str(i)+")";
	siyuanshi1[while4]+=int2str(k)+")";
	siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:("+"whend"+","+"_"+","+"_"+","+int2str(j)+")";
	siyuanshi1[xuhao1]=temp+"("+"whend"+","+"_"+","+"_"+","+int2str(m)+")";
	xuhao1++;
	xuhao++;
}
void QUATHANSHUSHENGMING(string str1,string str2)
{
    siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:("+str1+","+"_"+","+"_"+","+str2+")";
    siyuanshi1[xuhao1]="("+str1+","+"_"+","+"_"+","+str2+")";
	xuhao1++;

}
void QUATDIAOYONG(string str)
{
     siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:("+str+","+"_"+","+"_"+"_"+")";
	 xuhao++;

}
void QUATRETURN()
{
    string temp="";
    temp1=s.Pop();
    siyuanshi[xuhao]="QT["+int2str(xuhao)+"]:(return,"+"_"+","+"_"+","+temp1+")";
    siyuanshi1[xuhao1]=temp+"(return,"+"_"+","+"_"+","+temp1+")";
    xuhao1++;
	xuhao++;
}
//生成四元式区















//语义分析部分
void SEARCH1(string a)
{
	int i=0;
	while(fhb[i][0]!="#")
	{
		if(a==fhb[i][0])
		{
			chongdingyi=1;
			return;
		}
		else
		{
			i++;
		}
	}
}
void SEARCH2(string a)
{
	int i=0;
	while(fhb[i][0]!="#")
	{
		if(a==fhb[i][0])
		{
			weidingyi=0;
			return;
			i++;
		}
		else
		{
			weidingyi=1;
			i++;
		}
	}
}
void yuyifenxi()
{
	int back=0;
	cout<<endl<<"语义分析结果如下:"<<endl;
		if(chongdingyi==1)
	{
		cout<<"重定义错误!"<<endl;
		back++;
	}
	if(weidingyi==1)
	{
		cout<<"未定义错误!"<<endl;
		back++;
	}
	if(back>0)
	{
		return;
	}
	else
	{
		cout<<"语义正确！"<<endl;
	}
}
//语义分析结束
//基本块划分

int compa(string ch[])
{
    int i;
    int k=0;
    for (i=0;ch[i].length()!=0;i++){
    if ((ch[i]=="(while,_,_,_)")||(ch[i]=="(proc,_,_,_)")||(ch[i]=="(func,_,_,_)")||(ch[i]=="(ifend,_,_,_)")||(ch[i]=="(lable,_,_,_)"))
        {
            if (siyuanshi2[k].length()==0)
            siyuanshi2[k]=ch[i];
            else
                k++;
            siyuanshi2[k]=ch[i];
        }
     else if((ch[i].substr(0,6)=="(goto,")||(ch[i].substr(0,6)=="(then,")||(ch[i].substr(0,6)==("(else,"))||(ch[i].substr(0,6)=="(whend"||(ch[i].substr(0,6)=="(do,_,")||(ch[i].substr(0,6)=="(call,")))
            {//cout<<"**********"<<endl;
                siyuanshi2[k]+=ch[i];
                //cout<<base[k]<<endl;
                k++;
            }
     else if(ch[i].substr(0,3)=="(=,")
            {//cout<<"**********"<<endl;
            //for (j=0;j<=(i-temp);j++,record++)
                siyuanshi2[k]+=ch[i];
                k++;
            }
    else if(ch[i].substr(0,7)=="(return")
                continue;
            else siyuanshi2[k]+=ch[i];
}
cout<<"基本块划分为："<<endl;
for(i=0;siyuanshi2[i].length()!=0;i++)
        cout<<"("<<(i+1)<<")"<<siyuanshi2[i]<<endl;
       // cout<<ch[19]<<endl;
   return 0;
}
int isOperator(string ch){
        if (ch=="then")
            return 1;
        if  (ch=="else")
            return 2;
		if (ch=="+")
			return 3;
		if (ch=="-")
			return 4;
		if (ch=="*")
			return 5;
		if (ch=="/")
			return 6;
        if (ch=="=")
            return 7;
        if (ch=="<")
            return 8;
        if (ch=="ifend")
            return 9;
        if (ch==">")
            return 10;
        if (ch=="while")
            return 11;
        if (ch=="do")
            return 12;
        if (ch=="whend")
            return 13;
        if (ch=="fun2")
            return 14;
        if (ch=="@")
            return 8;
        else return 0;
}
void Operator_Number(){
  int i;
  char *p=(char*)siyuanshi2[j].data();
  while (*p=='('){
  p++;
  while (*p!=','){
  Operate[mm].operationName+=*p;
  p++;
  }
  p++;
  for (i=0;*p!=',';i++){
  Operate[mm].opp1[i]=*p;
  p++;
  }
  p++;
  for (i=0;*p!=',';i++){
  Operate[mm].opp2[i]=*p;
  p++;
  }
  p++;
  while (*p!=')'){
  Operate[mm].ans+=*p;
  p++;
  }
  p++;
  Operate[mm].temp=isOperator(Operate[mm].operationName);
  mm++;
  }
}

char* OperatorToString(int i){
	switch(i){
		case 1:
			return "JUMP0";
		case 2:
			return "JMP";
		case 3:
			return "ADD";
		case 4:
			return "SUB";
		case 5:
			return "MUL";
		case 6:
			return "DIV";
        case 7:
            return 0;
        case 8:
            return "COMPARE";
        case 9:
            return " ";
        case 10:
            return "COMPARE";
        case 11:
            return " ";
        case 12:
            return "JUMP0";
        case 13:
            return "JMP";
        case 14:
            return "FUN";
		default:
			return " ";
	}
}
int displayOperations(int k){
    if (OperatorToString(Operate[k].temp)==" ")
        return 0;
    else{
	cout<<"LD"<<"\t"<<"R"<<","<<Operate[k].opp1<<endl;
	cout<<OperatorToString(Operate[k].temp)<<"\t"<<"R"<<","<<Operate[k].opp2<<endl;
    }
    return 0;
	}

int displayOperations1(int k){
     if (OperatorToString(Operate[k].temp)==" ")
        return 0;
    else{
    if ((Operate[k].temp==1)||(Operate[k].temp==12))
   {cout<<"ST"<<"\t"<<"R"<<","<<acc<<endl;
    cout<<"LD"<<"\t"<<"R"<<","<<Operate[k].opp1<<endl;
    cout<<OperatorToString(Operate[k].temp)<<"\t"<<"R"<<","<<Operate[k].ans<<endl;
   }
   if ((Operate[k].temp==2)||(Operate[k].temp==13))
   {cout<<OperatorToString(Operate[k].temp)<<"\t"<<Operate[k].ans<<endl;}
    if ((Operate[k].temp==4)||(Operate[k].temp==6))
    {cout<<"ST"<<"\t"<<"R"<<","<<acc<<endl;
    cout<<"LD"<<"\t"<<"R"<<","<<Operate[k].opp1<<endl;
    cout<<OperatorToString(Operate[k].temp)<<"\t"<<"R"<<","<<Operate[k].opp2<<endl;
    }
   if ((Operate[k].temp==3)||(Operate[k].temp==5)){
    cout<<OperatorToString(Operate[k].temp)<<"\t"<<"R"<<","<<Operate[k].opp2<<endl;
    }
    if (Operate[k].temp==7)
    {
        if(acc!="_")
    {cout<<"ST"<<"\t"<<"R"<<","<<acc<<endl;}
    cout<<"LD"<<"\t"<<"R"<<","<<Operate[k].opp1<<endl;
    cout<<"ST"<<"\t"<<"R"<<","<<Operate[k].ans<<endl;
    }
    if (Operate[k].temp==8)
    cout<<OperatorToString(Operate[k].temp)<<"\t"<<Operate[k].opp2<<","<<Operate[k].opp1<<endl;
    if (Operate[k].temp==10)
    cout<<OperatorToString(Operate[k].temp)<<"\t"<<Operate[k].opp1<<","<<Operate[k].opp2<<endl;
    if (Operate[k].temp==14)
    cout<<OperatorToString(Operate[k].temp)<<":"<<endl;
    }
    return 0;
}

//}
void last(){
     int i=0;
	while (siyuanshi2[j].length()!=0){
	Operator_Number();
	j++;
	}
	 cout<<"最后生成的汇编代码如下："<<endl;
	for (i=0;Operate[i].operationName.length()!=0;i++){
	if(acc=="0")
	displayOperations(i);
	else displayOperations1(i);
	acc=Operate[i].ans;
	}
}
